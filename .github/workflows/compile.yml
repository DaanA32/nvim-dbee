name: Compile and Upload Binaries

on:
  push:
    paths:
      # only when go source or install script change
      - 'dbee/**'
      - 'lua/dbee/install/**'
    tags-ignore:
      # ignore all tags
      - '**'
    branches:
      # run for all branches
      - '**'

env:
  BUCKET_REPOSITORY_PUBLISH_USER: "${{ secrets.BUCKET_REPOSITORY_PUBLISH_USER }}"
  BUCKET_REPOSITORY_PUBLISH_TOKEN: "${{ secrets.BUCKET_REPOSITORY_PUBLISH_TOKEN }}"
  BUCKET_REPOSITORY_NAME: "${{ vars.BUCKET_REPOSITORY_NAME }}"
  BUCKET_REPOSITORY_OWNER: "${{ vars.BUCKET_REPOSITORY_OWNER }}"

jobs:
  assemble-os-matrix:
    runs-on: ubuntu-22.04
    name: Assemble Matrix
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Matrix
        id: set-matrix
        run: ./ci/target-matrix.sh >> "$GITHUB_OUTPUT"

  check-secrets:
    runs-on: ubuntu-22.04
    name: Check Secrets
    steps:
      - name: Check for Secret Availability
        run: |
          [ "$BUCKET_REPOSITORY_PUBLISH_USER" != '' ] || (echo "no BUCKET_REPOSITORY_PUBLISH_USER secret"; exit 1)
          [ "$BUCKET_REPOSITORY_PUBLISH_TOKEN" != '' ] || (echo "no BUCKET_REPOSITORY_PUBLISH_TOKEN secret"; exit 1)
          [ "$BUCKET_REPOSITORY_OWNER" != '' ] || (echo "no BUCKET_REPOSITORY_OWNER secret"; exit 1)
          [ "$BUCKET_REPOSITORY_NAME" != '' ] || (echo "no BUCKET_REPOSITORY_NAME secret"; exit 1)

  go-build:
    needs: [ assemble-os-matrix, check-secrets ]
    name: Go Build
    strategy:
      matrix: ${{ fromJson(needs.assemble-os-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.buildplatform }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.x'
          check-latest: true
          cache-dependency-path: dbee/go.sum
      - name: Setup Zig for C Cross Compilation
        uses: goto-bus-stop/setup-zig@v2
      - name: Build
        id: build
        working-directory: dbee
        shell: bash
        run: |
          ext=""
          [ '${{ matrix.goos }}' = "windows" ] && ext=".exe"
          binname="dbee_${{ matrix.goos }}_${{ matrix.goarch }}$ext"
          echo "binary-name=$binname" >> "$GITHUB_OUTPUT"

          ../ci/build.sh \
            -o "${{ matrix.goos }}" \
            -a "${{ matrix.goarch }}" \
            -c "${{ matrix.crossarch }}" \
            -b "${{ matrix.buildtags }}" \
            -e "${{ matrix.cgo }}" \
            -p "../ci_tmp/bin/$binname"
      - name: Publish Binary to bucket
        shell: bash
        if: github.event_name == 'push'
        id: publish-binary
        run: |
          branch="run-${{ github.run_id }}_${{ matrix.goos }}_${{ matrix.goarch }}"
          echo "branch=$branch" >> "$GITHUB_OUTPUT"

          ./ci/publish.sh \
            -a "ci_tmp/bin/*" \
            -b "$branch" \
            -u "$BUCKET_REPOSITORY_PUBLISH_USER" \
            -t "$BUCKET_REPOSITORY_PUBLISH_TOKEN" \
            -r "$BUCKET_REPOSITORY_OWNER/$BUCKET_REPOSITORY_NAME" \
            -m "added binary for ${{ matrix.goos }}/${{ matrix.goarch }}"
      - name: Create metadata
        shell: bash
        run: |
          mkdir ci_tmp/meta
          echo "https://github.com/$BUCKET_REPOSITORY_OWNER/$BUCKET_REPOSITORY_NAME/raw/${{ steps.publish-binary.outputs.branch }}/bin/${{ steps.build.outputs.binary-name }}" > ci_tmp/meta/url
          echo "${{ matrix.goos }}" > ci_tmp/meta/os
          echo "${{ matrix.goarch }}" > ci_tmp/meta/arch
      - name: Upload metadata
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.goos }}_${{ matrix.goarch }}
          path: ci_tmp/meta/*

  create-install-file:
    runs-on: ubuntu-22.04
    name: Create Install File
    needs: [ go-build, check-secrets ]
    env:
      MANIFEST_FILE: "lua/dbee/install/__manifest.lua"
    steps:
      - uses: actions/checkout@v3
      - name: Get metadata
        uses: actions/download-artifact@v3
        with:
          path: meta
      - name: Create Install File from metadata
        run: |
          {
            echo "-- This file is automatically generated using CI pipeline"
            echo "-- DO NOT EDIT!"
            echo "local M = {}"
            echo
            echo "-- Links to binary releases"
            echo "M.urls = {"
            for art in meta/*; do
              os="$(cat "$art/os")"
              arch="$(cat "$art/arch")"
              url="$(cat "$art/url")"
              echo "  [\"$os/$arch\"] = \"$url\","
            done
            echo "}"
            echo
            echo "return M"
          } > "$MANIFEST_FILE"
      - name: Commit the Generated File
        uses: EndBug/add-and-commit@v9
        if: github.event_name == 'push'
        with:
          add: "${{ env.MANIFEST_FILE }}"
          author_name: Github Actions
          author_email: actions@github.com
          message: "[install] update install manifest"
          pull: --rebase --autostash
